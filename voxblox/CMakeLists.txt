

############
# PROTOBUF #
############
# General idea: first check if we have protobuf catkin, then use that.
# Otherwise use system protobuf.
#set(PROTO_DEFNS proto/voxblox/Block.proto
#                proto/voxblox/Layer.proto)
#set(BASE_PATH "proto")
#set(PROTOBUF_COMPILE_PYTHON true)

#PROTOBUF_CATKIN_GENERATE_CPP2(${BASE_PATH} PROTO_SRCS PROTO_HDRS ${PROTO_DEFNS})

####################
# SET SOURCE FILES #
####################

#set("${PROJECT_NAME}_SRCS"
#  src/alignment/icp.cc
#  src/core/block.cc
#  src/core/esdf_map.cc
#  src/core/tsdf_map.cc
#  src/integrator/esdf_integrator.cc
#  src/integrator/esdf_occ_integrator.cc
#  src/integrator/integrator_utils.cc
#  src/integrator/intensity_integrator.cc
#  src/integrator/tsdf_integrator.cc
#  src/io/mesh_ply.cc
#  src/io/sdf_ply.cc
#  src/mesh/marching_cubes.cc
#  src/simulation/objects.cc
# src/simulation/simulation_world.cc
#  src/utils/camera_model.cc
#  src/utils/evaluation_utils.cc
#  src/utils/layer_utils.cc
#  src/utils/neighbor_tools.cc
#  src/utils/protobuf_utils.cc
#  src/utils/timing.cc
#  src/utils/voxel_utils.cc
#)

#############
# LIBRARIES #
#############
#cs_add_library(${PROJECT_NAME}_proto
#  ${PROTO_SRCS}
#)

#cs_add_library(${PROJECT_NAME}
#  ${${PROJECT_NAME}_SRCS}
#)
#target_link_libraries(${PROJECT_NAME} ${PROJECT_NAME}_proto)

############
# BINARIES #
############

#add_executable(tsdf_to_esdf
#  test/tsdf_to_esdf.cc
#)
#target_link_libraries(tsdf_to_esdf ${PROJECT_NAME})

#add_executable(test_load_esdf
#  test/test_load_esdf.cc
#)
#target_link_libraries(test_load_esdf ${PROJECT_NAME})

#########
# TESTS #
#########
#add_custom_target(test_data)
#add_custom_command(TARGET test_data
#                  COMMAND rm -rf test_data
#                  COMMAND mkdir -p test_data
#                  COMMAND cp -r ${CMAKE_SOURCE_DIR}/test/test_data/*
#                                test_data/ || :)

#add_definitions(-DVISUALIZE_UNIT_TEST_RESULTS)

#catkin_add_gtest(test_approx_hash_array
#  test/test_approx_hash_array.cc#
#)
#target_link_libraries(test_approx_hash_array ${PROJECT_NAME})

#catkin_add_gtest(test_tsdf_map
#  test/test_tsdf_map.cc
#)
#target_link_libraries(test_tsdf_map ${PROJECT_NAME})

#catkin_add_gtest(test_protobuf
#  test/test_protobuf.cc
#)
#target_link_libraries(test_protobuf ${PROJECT_NAME})

#catkin_add_gtest(test_tsdf_interpolator
#  test/test_tsdf_interpolator.cc
#)
#target_link_libraries(test_tsdf_interpolator ${PROJECT_NAME})

#catkin_add_gtest(test_layer
#  test/test_layer.cc
#)
#target_link_libraries(test_layer ${PROJECT_NAME})

#catkin_add_gtest(test_merge_integration
#  test/test_merge_integration.cc
#)
#target_link_libraries(test_merge_integration ${PROJECT_NAME})

#catkin_add_gtest(test_layer_utils
#  test/test_layer_utils.cc
#)
#target_link_libraries(test_layer_utils ${PROJECT_NAME})

#catkin_add_gtest(test_sdf_integrators
#  test/test_sdf_integrators.cc
#)
#target_link_libraries(test_sdf_integrators ${PROJECT_NAME})

#catkin_add_gtest(test_bucket_queue
#  test/test_bucket_queue.cc
#)
#target_link_libraries(test_bucket_queue ${PROJECT_NAME})

#catkin_add_gtest(test_clear_spheres
#  test/test_clear_spheres.cc
#)
#target_link_libraries(test_clear_spheres ${PROJECT_NAME})

##########
# EXPORT #
##########
#cs_install()
#cs_export(INCLUDE_DIRS ${CATKIN_DEVEL_PREFIX}/include)

########################
############
############
############ NEW !!!!
############
############
########################


cmake_minimum_required(VERSION 3.5)
project(voxblox)

find_package(ament_cmake REQUIRED)
FIND_PACKAGE(Protobuf REQUIRED)
find_package(Eigen 3 QUIET)
find_package(Gflags REQUIRED)
#find_package(pcl_conversions REQUIRED)
#find_package(pcl_msgs REQUIRED)

############
# PROTOBUF #
############

INCLUDE(FindProtobuf)
INCLUDE_DIRECTORIES(${PROTOBUF_INCLUDE_DIR})
SET_SOURCE_FILES_PROPERTIES(${PROTO_SRC} ${PROTO_INCL} PROPERTIES GENERATED TRUE)
set(PROTOBUF_COMPILE_PYTHON true)
PROTOBUF_GENERATE_CPP(PROTO_SRC PROTO_HEADER proto/voxblox/Layer.proto proto/voxblox/Block.proto)
ADD_LIBRARY(proto ${PROTO_HEADER} ${PROTO_SRC})
##
## TODO: move proto headers to source
##


####################
# SET SOURCE FILES #
####################

set("${PROJECT_NAME}_SRCS"
  src/alignment/icp.cc
  src/core/block.cc
  src/core/esdf_map.cc
  src/core/tsdf_map.cc
  src/integrator/esdf_integrator.cc
  src/integrator/esdf_occ_integrator.cc
  src/integrator/integrator_utils.cc
  src/integrator/intensity_integrator.cc
  src/integrator/tsdf_integrator.cc
  src/io/mesh_ply.cc
  src/io/sdf_ply.cc
  src/mesh/marching_cubes.cc
  src/simulation/objects.cc
  src/simulation/simulation_world.cc
  src/utils/camera_model.cc
  src/utils/evaluation_utils.cc
  src/utils/layer_utils.cc
  src/utils/neighbor_tools.cc
  src/utils/protobuf_utils.cc
  src/utils/timing.cc
  src/utils/voxel_utils.cc
)


############
# BINARIES #
############


include_directories(include)
add_library (${PROJECT_NAME} ${${PROJECT_NAME}_SRCS})
target_include_directories (${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

ament_export_targets(export_${PROJECT_NAME} HAS_LIBRARY_TARGET)

install(
  DIRECTORY include/
  DESTINATION include
)

install(
  TARGETS ${PROJECT_NAME}
  EXPORT export_${PROJECT_NAME}
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  RUNTIME DESTINATION bin
  INCLUDES DESTINATION include
)

ament_export_include_directories(include)
ament_export_libraries(${PROJECT_NAME})

#
#if(BUILD_TESTING)
#  find_package(ament_lint_auto REQUIRED)
#  ament_lint_auto_find_test_dependencies()
#
#  find_package(ament_cmake_gtest REQUIRED)
#endif()
#

#set(VOXBLOX_INCLUDE_DIRS include
#    CACHE INTERNAL "${PROJECT_NAME}: Include Directories" FORCE)
